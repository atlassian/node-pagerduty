// Generated by CoffeeScript 1.7.1
(function() {
  var PagerDuty, request,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  request = require('request');

  PagerDuty = (function() {
    module.exports = PagerDuty;

    function PagerDuty(_arg) {
      this.serviceKey = _arg.serviceKey;
      if (this.serviceKey == null) {
        throw new Error('PagerDuty.constructor: Need serviceKey!');
      }
    }

    PagerDuty.prototype.create = function(_arg) {
      var callback, description, details, incidentKey;
      description = _arg.description, incidentKey = _arg.incidentKey, details = _arg.details, callback = _arg.callback;
      if (description == null) {
        throw new Error('PagerDuty.create: Need description!');
      }
      return this._request(__extends(arguments[0], {
        eventType: 'trigger'
      }));
    };

    PagerDuty.prototype.acknowledge = function(_arg) {
      var callback, description, details, incidentKey;
      incidentKey = _arg.incidentKey, details = _arg.details, description = _arg.description, callback = _arg.callback;
      if (incidentKey == null) {
        throw new Error('PagerDuty.acknowledge: Need incidentKey!');
      }
      return this._request(__extends(arguments[0], {
        eventType: 'acknowledge'
      }));
    };

    PagerDuty.prototype.resolve = function(_arg) {
      var callback, description, details, incidentKey;
      incidentKey = _arg.incidentKey, details = _arg.details, description = _arg.description, callback = _arg.callback;
      if (incidentKey == null) {
        throw new Error('PagerDuty.resolve: Need incidentKey!');
      }
      return this._request(__extends(arguments[0], {
        eventType: 'resolve'
      }));
    };

    PagerDuty.prototype._request = function(_arg) {
      var callback, description, details, eventType, incidentKey, json;
      description = _arg.description, incidentKey = _arg.incidentKey, eventType = _arg.eventType, details = _arg.details, callback = _arg.callback;
      if (eventType == null) {
        throw new Error('PagerDuty._request: Need eventType!');
      }
      incidentKey || (incidentKey = null);
      details || (details = {});
      callback || (callback = function() {});
      json = {
        service_key: this.serviceKey,
        event_type: eventType,
        description: description,
        details: details
      };
      if (incidentKey != null) {
        json.incident_key = incidentKey;
      }
      return request({
        method: 'POST',
        uri: 'https://events.pagerduty.com/generic/2010-04-15/create_event.json',
        json: json
      }, function(err, response, body) {
        if (err || response.statusCode !== 200) {
          return callback(err || new Error(body.errors[0]));
        } else {
          return callback(null, body);
        }
      });
    };

    PagerDuty.prototype.createUser = function(_arg) {
      var callback, email, json, name, requester_id, subdomain, uri;
      subdomain = _arg.subdomain, name = _arg.name, email = _arg.email, requester_id = _arg.requester_id, callback = _arg.callback;
      callback || (callback = function() {});
      json = {
        name: name,
        email: email,
        requester_id: requester_id
      };
      uri = 'https://' + subdomain + '.pagerduty.com/api/v1/users';
      return request({
        method: 'POST',
        uri: uri,
        json: json,
        headers: {
          'Authorization': 'Token token=' + this.serviceKey
        }
      }, function(err, response, body) {
        if (err || response.statusCode !== 201) {
          return callback(err || new Error(body.error.errors[0]));
        } else {
          return callback(null, body);
        }
      });
    };

    PagerDuty.prototype.createService = function(_arg) {
      var callback, escalation_policy_id, json, name, subdomain, token, type, uri;
      subdomain = _arg.subdomain, token = _arg.token, name = _arg.name, escalation_policy_id = _arg.escalation_policy_id, type = _arg.type, callback = _arg.callback;
      callback || (callback = function() {});
      json = {
        name: name,
        escalation_policy_id: escalation_policy_id,
        type: type
      };
      uri = 'https://' + subdomain + '.pagerduty.com/api/v1/services';
      return request({
        method: 'POST',
        uri: uri,
        json: json,
        headers: {
          'Authorization': 'Token token=' + this.serviceKey
        }
      }, function(err, response, body) {
        if (err || response.statusCode !== 201) {
          return callback(err || new Error(body.error.errors[0]));
        } else {
          return callback(null, body);
        }
      });
    };

    return PagerDuty;

  })();

}).call(this);
